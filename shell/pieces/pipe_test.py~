#! /usr/bin/env python3

import os, sys, time, re

pid = os.getpid()

def exec_(args=[], in_fd=None, out_fd=None, parent_wait=True):
    '''
    Forks a child process and execs args.
        args: list of agruments to be passed to os.execve()
        in_fd: integer of new input file descriptor
        out_fd: integer of new output file descriptor
        parent_wait: if True, then parent waits for child process to terminate
    '''
    os.write(1, ("Command read...About to fork (pid:%d)\n" % pid).encode())

    rc = os.fork()

    if rc < 0:
        os.write(2, ("fork failed, returning %d\n" % rc).encode())
        sys.exit(1)

    elif rc == 0:                   # child
        child_pid = os.getpid()
        os.write(1, ("Child: My pid=%d.  Parent's pid=%d\n" % 
                    (child_pid, pid)).encode())

        # change stdin/out fds if given
        if in_fd:
            os.write(2, ("Child: pid=%d given in_fd: %d\n" % (child_pid, in_fd)).encode())
            os.close(0)
            fd = os.dup(in_fd)
            os.set_inheritable(fd, True)
            os.close(in_fd)
            os.write(2, ("Child: pid=%d fd 0 -> %d\n" % (child_pid, in_fd)).encode())
            # os.write(2, ("Child: pid=%d using fd=%d for reading\n" % (child_pid, fd)).encode())
        if out_fd:
            os.write(2, ("Child: pid=%d given out_fd: %d\n" % (child_pid, out_fd)).encode())
            os.close(1)
            fd = os.dup(out_fd)
            os.set_inheritable(fd, True)
            os.close(out_fd)
            os.write(2, ("Child: pid=%d fd 1 -> %d\n" % (child_pid, out_fd)).encode())
            # os.write(2, ("Child: pid=%d using fd=%d for writing\n" % (child_pid, fd)).encode())

        os.write(2, ("Child: pid=%d stdin fd: %d stdout fd: %d\n" % (child_pid, sys.stdin.fileno(),
                                                                     sys.stdout.fileno())).encode())
        for dir in re.split(":", os.environ['PATH']): # try each directory in the path
            program = "%s/%s" % (dir, args[0])
            # os.write(1, ("Child: pid=%d  ...trying to exec %s\n" % (child_pid, program)).encode())
            try:
                os.execve(program, args, os.environ) # try to exec program
            except FileNotFoundError:             # ...expected
                pass                              # ...fail quietly

        os.write(2, ("Child: pid=%d Could not exec %s\n" % (child_pid, args[0])).encode())
        sys.exit(1)                 # terminate with error

    else:                           # parent (forked ok)
        os.write(1, ("Parent: My pid=%d.  Child's pid=%d\n" % 
                    (pid, rc)).encode())
        if parent_wait:
            childPidCode = os.wait()
            os.write(1, ("Parent: Child %d terminated with exit code %d\n" % 
                        childPidCode).encode())


# cat shelly.py | grep 'os'
args1 = ['cat', 'shelly.py']
args2 = ['wc']

# using actual pipes
pipefds = os.pipe() # create a pipe, and get fd's
for pfd in pipefds:
    print(os.get_inheritable(pfd))
    # os.set_inheritable(pfd, True)  # why doesn't it liike them to be inheritable?
exec_(args=args1, out_fd=pipefds[1], parent_wait=False) # cat
exec_(args=args2, in_fd=pipefds[0], parent_wait=True) # wc
# print(os.read(pipefds[0], 1024))

# using a file, not a pipe
# new_out_fd = os.open('pseudo_pipe.txt', os.O_WRONLY | os.O_CREAT)
# new_in_fd = os.open('pseudo_pipe.txt', os.O_RDONLY)
# exec_(args=args1, out_fd=new_out_fd, parent_wait=False) # cat
# exec_(args=args2, in_fd=new_in_fd, parent_wait=True) # wc

* Shelly (The little python shell)
  Shelly is a quaint little python shell.
  It has support for pipes (any number),  and '<' and '>' file redirection.
  If the 'PS1' environment variable is set, shelly will use it for the prompt.
  
** Usage
   You can use Shelly to call executable programs found in your =$PATH=.
   #+BEGIN_SRC sh
   $ python3 ./shelly.py
   shelly $ ...
   #+END_SRC

** How it works
   In general,
   like you would expect a shell to work.
   1. Ask for a command
      1.a. Evaluate (is that the right word?) the command
   2. Execute the command!
   3. Do it again.   
      
   It uses a global list (=close_these_fds=) to track the opened pipefds.

*** shelly.read_()
    The =read_()= function is the bread and butter of this program.
    It gets called in an infinite loop.
    It handles parsing the user's input and
    making the appropriate call to =shelly.exec_()=.
    
    this function checks for special commands:
    - =exit= - terminate the shell
      
    If there is a pipe in the command,
    the input is split along the pipes,
    and a call to =os.pipe()= is made for each pipe in the input.
    
    The input(previously split on pipes or not)
    is then split along whitespace and passed to =prep_subprocess()=.
    A list of Process objects is created,
    and then a call to =exec_()= is made for each one.
      
*** Process.py
    *Process* objects.
    A way to store the args, input file descriptor, and output file descriptor
    of a command that is issued by the user.
    
    If I had kept track of the active processes,
    this class could have included the pid of the process,
    and its state.
    

*** shelly.prep_subprocesss(args=[], pipe_read=None, pipe_write=None)
    
    This should probably be two methods.
    It creates a process object
    and sets its args(given to execve) and file_descriptors.
    
    A slightly wordy while loop checks the list of tokens (=args=)
    for =<= and =>=. If the process is being piped to/from
    an exception will be raised for the multiple redirections.
    If the =>= redirection is legal, a fd will be opened for the file.


*** shelly.exec_(args=[], in_fd=None, out_fd=None, parent_wait=True)
    This is the bit that actually asks the OS to run our command
    by forking a child process and calling =os.execve()=
    
    This method takes a list of args to be passed to =os.execve()=.
    The =in_redir= and =out_redir= arguments are
    filenames that will be the new I/O for the command.
    If either is non-None (that sounds funny)
    their respective file descriptor is closed and
    the new file is opened in it's place.
    The following idiom for this action is used:
    
    #+BEGIN_SRC python
    # Ex. change the stdin file descriptor w/o os.dup2()
    if in_fd:
	os.close(0)
	fd = os.dup(in_fd)
	os.set_inheritable(fd, True)
	os.close(in_fd)
    #+END_SRC
    
    There is a shorter way of saying this using
    [[https://docs.python.org/3.5/library/os.html#os.dup2][os.dup2(fd, fd2, inheritable=True)]]

    #+BEGIN_SRC python
    # Ex. change the stdin file descriptor with os.dup2()
    if in_fd:
	fd = os.dup2(0, in_fd, inheritable=True)
        os.close(in_fd)
    #+END_SRC
    
    Avoided for the sake of clarity in what I was doing.
    
    For execution,
    the program tries execution with every directory listed in 
    =os.environ['PATH']=, in the order they are listed.
    Nothing crazy here.
    
    The parent closes the fds that were passed to =exec_()=,
    I need to make sure that this is closing the pipefds too.
    It should be, but for now I'm still calling =paranoid_pipefd_close()=.

    If =parent_wait= is True,
    then the parent will wait for the child that it just forked
    to terminate.
    
    #+BEGIN_SRC python
    while parent_wait:
	try:
	    childPidCode = os.wait()
	    if childPidCode[0] == rc:
		break
	except ChildProcessError:
	    os.write(2, ("child processes already terminated").encode())
	    break
	    pass
    #+END_SRC

